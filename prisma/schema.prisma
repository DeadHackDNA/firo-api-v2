generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model FireRecord {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude      Float?
  longitude     Float?
  brightness    Float?
  scan          Float?
  track         Float?
  acq_date      DateTime // required for date-range queries
  acq_time      String?
  satellite     String?
  instrument    String?
  confidence    Float?
  version       Float?
  bright_t31    Float?
  frp           Float?
  daynight      String?
  type          Float?
  elevation     Float?
  land_cover    Float?
  slope         Float?
  temperature   Float?
  wind_speed    Float?
  precipitation Float?

  @@index([acq_date])
}

model User {
  // Mongo id
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now())

  conversations Conversation[]
  answersLLM    AnswerLLM[]
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  startTime DateTime  @default(now())
  endTime   DateTime?
  context   Json?

  user     User      @relation(fields: [userId], references: [id])
  messages Message[]
}

model Message {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String     @db.ObjectId
  sender         SenderType
  content        String
  intent         String?
  entities       Json?
  sentiment      String? // opcional: positivo, negativo, neutro
  createdAt      DateTime   @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
}

enum SenderType {
  USER
  BOT
}

model AnswerLLM {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}
